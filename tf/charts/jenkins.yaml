master:
  image: "jenkins/jenkins"
  imageTag: "2.176.1"
  imagePullPolicy: "Always"
  numExecutors: 0
  # configAutoReload requires UseSecurity is set to true:
  useSecurity: true
  # When enabling LDAP or another non-Jenkins identity source, the built-in admin account will no longer exist.
  # Since the AdminUser is used by configAutoReload, in order to use configAutoReload you must change the
  # .master.adminUser to a valid username on your LDAP (or other) server.  This user does not need
  # to have administrator rights in Jenkins (the default Overall:Read is sufficient) nor will it be granted any
  # additional rights.  Failure to do this will cause the sidecar container to fail to authenticate via SSH and enter
  # a restart loop.  Likewise if you disable the non-Jenkins identity store and instead use the Jenkins internal one,
  # you should revert master.adminUser to your preferred admin user:
  adminUser: "admin"
  # adminPassword: <defaults to random>
  # adminSshKey: <defaults to auto-generated>
  # If CasC auto-reload is enabled, an SSH (RSA) keypair is needed.  Can either provide your own, or leave unconfigured to allow a random key to be auto-generated.
  # If you supply your own, it is recommended that the values file that contains your key not be committed to source control in an unencrypted format
  resources:
    requests:
      cpu: "3"
      memory: "8Gi"
    limits:
      cpu: "3"
      memory: "8Gi"
  containerEnv:
    - name: CASC_VAULT_TOKEN
      valueFrom:
        secretKeyRef:
          name: "${casc_vault_secret_name}"
          key: CASC_VAULT_TOKEN
    - name: CASC_VAULT_PATHS
      value: "${vault_root}/scipipe-publish,${vault_root}/slack,${vault_root}/ghslacker,${vault_root}/github_oauth,${vault_root}/github_api,${vault_root}/dockerhub,${vault_root}/versiondb_ssh"
    - name: CASC_VAULT_URL
      value: https://vault.lsst.codes
    - name: CASC_VAULT_ENGINE_VERSION
      value: '2'
  # Set min/max heap here if needed with:
  # javaOpts: "-Xms512m -Xmx512m"
  # jenkinsOpts: ""
  # jenkinsUrl: ""
  # If you set this prefix and use ingress controller then you might want to set the ingress path below
  # jenkinsUriPrefix: "/jenkins"
  # Enable pod security context (must be `true` if runAsUser or fsGroup are set)
  usePodSecurityContext: true
  runAsUser: 1000
  fsGroup: 1000
  servicePort: 8080
  targetPort: 8080
  # For minikube, set this to NodePort, elsewhere use LoadBalancer
  # Use ClusterIP if your setup includes ingress controller
  serviceType: ClusterIP
  slaveListenerPort: 55555
  slaveListenerServiceType: "ClusterIP"
  # Optionally configure a JMX port
  # requires additional javaOpts, ie
  # javaOpts: >
  #   -Dcom.sun.management.jmxremote.port=4000
  #   -Dcom.sun.management.jmxremote.authenticate=false
  #   -Dcom.sun.management.jmxremote.ssl=false
  # jmxPort: 4000
  # Optionally configure other ports to expose in the master container
  extraPorts:
  # - name: BuildInfoProxy
  #   port: 9000

  overwritePlugins: true
  # List of plugins to be install during Jenkins master start
  installPlugins:
    - swarm:3.15
    - credentials:2.2.0
    - command-launcher:1.3
    - support-core:2.56
    - metrics:4.0.2.3
    - jackson2-api:2.9.9
    - bouncycastle-api:2.17
    - junit:1.28
    - script-security:1.60
    - plain-credentials:1.5
    - icon-shim:2.0.3
    - github:1.29.4
    - token-macro:2.7
    - git:3.10.0
    - github-api:1.95
    - scm-api:2.4.1
    - git-client:2.7.7
    - github-oauth:0.32
    - mailer:1.23
    - display-url-api:2.3.1
    - credentials-binding:1.19
    - nodelabelparameter:1.7.2
    - jquery:1.12.4-0
    - postbuildscript:2.8.1
    - maven-plugin:3.2
    - apache-httpcomponents-client-4-api:4.5.5-3.0
    - jsch:0.1.55
    - javadoc:1.5
    - greenballs:1.15
    - rebuild:1.31
    - build-user-vars-plugin:1.5
    - envinject:2.1.6
    - envinject-api:1.5
    - purge-build-queue-plugin:1.0
    - ssh-credentials:1.16
    - ssh-slaves:1.29.4
    - antisamy-markup-formatter:1.5
    - external-monitor-job:1.7
    - parameterized-trigger:2.35.2
    - conditional-buildstep:1.3.6
    - matrix-project:1.14
    - run-condition:1.2
    - durable-task:1.29
    - multiple-scms:0.6
    - cloudbees-folder:6.8
    - job-dsl:1.74
    - structs:1.19
    - workflow-scm-step:2.8
    - windows-slaves:1.4
    - matrix-auth:2.4.2
    - workflow-aggregator:2.6
    - lockable-resources:2.5
    - jquery-detached:1.2.1
    - workflow-api:2.34
    - workflow-support:3.3
    - workflow-step-api:2.20
    - workflow-job:2.32
    - pipeline-stage-view:2.11
    - pipeline-rest-api:2.11
    - handlebars:1.1.1
    - momentjs:1.1.1
    - pipeline-build-step:2.9
    - ace-editor:1.1
    - git-server:1.7
    - branch-api:2.5.2
    - workflow-durable-task-step:2.31
    - pipeline-input-step:2.10
    - pipeline-stage-step:2.3
    - workflow-basic-steps:2.18
    - workflow-cps:2.70
    - workflow-cps-global-lib:2.13
    - workflow-multibranch:2.21
    - pipeline-milestone-step:1.3.1
    - pipeline-graph-analysis:1.10
    - pipeline-model-declarative-agent:1.1.1
    - pipeline-model-api:1.3.8
    - pipeline-model-definition:1.3.8
    - pipeline-model-extensions:1.3.8
    - pipeline-stage-tags-metadata:1.3.8
    - copyartifact:1.42.1
    - saferestart:0.3
    - docker-workflow:1.18
    - docker-commons:1.15
    - authentication-tokens:1.3
    - dockerhub-notification:2.4.0
    - async-http-client:1.9.40.0
    - ssh-agent:1.17
    - groovy:2.2
    - github-branch-source:2.5.3
    - blueocean:1.16.0
    - blueocean-core-js:1.16.0
    - jenkins-design-language:1.16.0
    - blueocean-autofavorite:1.2.4
    - blueocean-commons:1.16.0
    - blueocean-config:1.16.0
    - blueocean-dashboard:1.16.0
    - blueocean-display-url:2.3.0
    - blueocean-events:1.16.0
    - blueocean-github-pipeline:1.16.0
    - blueocean-git-pipeline:1.16.0
    - blueocean-i18n:1.16.0
    - blueocean-jwt:1.16.0
    - blueocean-personalization:1.16.0
    - blueocean-pipeline-api-impl:1.16.0
    - blueocean-pipeline-editor:1.16.0
    - blueocean-pipeline-scm-api:1.16.0
    - blueocean-rest:1.16.0
    - blueocean-rest-impl:1.16.0
    - blueocean-web:1.16.0
    - blueocean-bitbucket-pipeline:1.16.0
    - blueocean-jira:1.16.0
    - blueocean-executor-info:1.16.0
    - favorite:2.3.2
    - pubsub-light:1.12
    - sse-gateway:1.17
    - variant:1.2
    - jira:3.0.7
    - htmlpublisher:1.18
    - cloudbees-bitbucket-branch-source:2.4.4
    - handy-uri-templates-2-api:2.1.7-1.0
    - mercurial:2.6
    - pipeline-utility-steps:2.3.0
    - build-timeout:1.19
    - jdk-tool:1.2
    - prometheus:2.0.0

  # Below is the implementation of Jenkins Configuration as Code.  Add a key under configScripts for each configuration area,
  # where each corresponds to a plugin or section of the UI.  Each key (prior to | character) is just a label, and can be any value.
  # Keys are only used to give the section a meaningful name.  The only restriction is they may only contain RFC 1123 \ DNS label
  # characters: lowercase letters, numbers, and hyphens.  The keys become the name of a configuration yaml file on the master in
  # /var/jenkins_home/casc_configs (by default) and will be processed by the Configuration as Code Plugin.  The lines after each |
  # become the content of the configuration yaml file.  The first line after this is a JCasC root element, eg jenkins, credentials,
  # etc.  Best reference is https://<jenkins_url>/configuration-as-code/reference.  The example below creates a welcome message:
  JCasC:
    enabled: true
    pluginVersion: 1.23
    configScripts:
      01-casc: |
        configuration-as-code:
          version: 1
          deprecated: warn
          restricted: warn
          unknown: warn
        jenkins:
          numExecutors: 0
          slaveAgentPort: 55555
          agentProtocols:
          - JNLP4-connect
          - Ping
          remotingSecurity:
            enabled: true
          quietPeriod: 0
          crumbIssuer:
            standard:
              excludeClientIPFromCrumb: true
          authorizationStrategy:
            globalMatrix:
              grantedPermissions:
              - Agent/Connect:sqre-user
              - Agent/Create:sqre-user
              - Overall/Administer:jhoblitt
              - Overall/Administer:frossie
              - Overall/Administer:lsst-sqre*square
              - Overall/Administer:lsst-sqre*Leeroy Wranglers
              - Overall/Read:lsst-sqre*Friends
              - Job/Build:lsst-sqre*Friends
              - Job/Cancel:lsst-sqre*Friends
              - Job/Discover:lsst-sqre*Friends
              - Job/Read:lsst-sqre*Friends
              - Overall/Read:lsst*Data Management
              - Job/Build:lsst*Data Management
              - Job/Cancel:lsst*Data Management
              - Job/Discover:lsst*Data Management
              - Job/Read:lsst*Data Management
              - Overall/Read:lsst*Simulations
              - Job/Build:lsst*Simulations
              - Job/Cancel:lsst*Simulations
              - Job/Discover:lsst*Simulations
              - Job/Read:lsst*Simulations
              - Overall/Read:lsst-dm*Data Management
              - Job/Build:lsst-dm*Data Management
              - Job/Cancel:lsst-dm*Data Management
              - Job/Discover:lsst-dm*Data Management
              - Job/Read:lsst-dm*Data Management
          securityRealm:
            github:
              clientID: "$${github_oauth_client_id}"
              clientSecret: "$${github_oauth_client_secret}"
              githubApiUri: https://api.github.com
              githubWebUri: https://github.com
              oauthScopes: read:org
        unclassified:
          location:
            url: "https://${jenkins_fqdn}"
            adminAddress: "${admin_email}"
          githubpluginconfig:
            configs:
            - credentialsId: github-api-token-sqreadmin
        security:
          GlobalJobDslSecurityConfiguration:
            useScriptSecurity: false
        jobs:
        - script: |
            folder('sqre') {
              description('SQRE mission related jobs')
            }
            folder('sqre/seeds') {}

            job('sqre/seeds/dm-jobs') {
              //label('jenkins-master')
              concurrentBuild(false)

              scm {
                git {
                  remote {
                    url('https://github.com/jhoblitt/jenkins-dm-jobs')
                  }
                  branch('*/tickets/DM-20229-k8s-master-test')
                }
              } // scm

              triggers {
                githubPush()
              }

              steps {
                shell('./gradlew libs')

                jobDsl {
                  targets('jobs/*.groovy')
                  useScriptText(false)
                  ignoreExisting(false)
                  ignoreMissingFiles(false)
                  removedJobAction('DELETE')
                  removedViewAction('IGNORE')
                  lookupStrategy('JENKINS_ROOT')
                  additionalClasspath('lib/*.jar')
                }
              } // steps
            } // job
        credentials:
          system:
            domainCredentials:
            - credentials:
              - string:
                  id: jenkins-env
                  scope: GLOBAL
                  description: Name of Jenkins deployment
                  secret: jhoblitt-curly
              - usernamePassword:
                  id: aws-jenkins-master-snapshot
                  scope: GLOBAL
                  description: jenkins master snapshot AWS credentials
                  username: "$${snapshot_aws_access_key_id}"
                  password: "$${snapshot_aws_secret_access_key}"
              - string:
                  id: doxygen-url
                  scope: GLOBAL
                  description: URL of doxygen site
                  secret: "$${doxygen_url}"
              - string:
                  id: eups-url
                  scope: GLOBAL
                  description: URL of eups site
                  secret: "$${eups_url}"
              - usernamePassword:
                  id: aws-eups-push
                  scope: GLOBAL
                  description: push EUPS packages -> s3
                  username: "$${eups_push_aws_access_key_id}"
                  password: "$${eups_push_aws_secret_access_key}"
              - string:
                  id: eups-push-bucket
                  scope: GLOBAL
                  description: name of EUPS s3 bucket
                  secret: "$${eups_s3_bucket}"
              - usernamePassword:
                  id: aws-eups-backup
                  scope: GLOBAL
                  description: backup EUPS s3 bucket -> s3 bucket
                  username: "$${eups_backup_aws_access_key_id}"
                  password: "$${eups_backup_aws_secret_access_key}"
              - string:
                  id: eups-backup-bucket
                  scope: GLOBAL
                  description: name of EUPS backup s3 bucket
                  secret: "$${eups_backup_s3_bucket}"
              - usernamePassword:
                  id: aws-eups-tag-admin
                  scope: GLOBAL
                  description: manage eups distrib tags in s3 bucket
                  username: "$${eups_tag_admin_aws_access_key_id}"
                  password: "$${eups_tag_admin_aws_secret_access_key}"
              - usernamePassword:
                  id: aws-doxygen-push
                  scope: GLOBAL
                  description: push doxygen builds -> s3
                  username: "$${doxygen_push_aws_access_key_id}"
                  password: "$${doxygen_push_aws_secret_access_key}"
              - string:
                  id: doxygen-push-bucket
                  scope: GLOBAL
                  description: name of doxygen s3 bucket
                  secret: "$${doxygen_s3_bucket}"
              - string:
                  id: cmirror-s3-bucket
                  scope: GLOBAL
                  description: name of conda channel bucket
                  secret: conda-mirror.lsst.codes
              - string:
                  id: slack-lsstc-token
                  scope: GLOBAL
                  description: slack lsstc org API token
                  secret: "$${slack_api_token}"
              - usernamePassword:
                  id: ghslacker
                  scope: GLOBAL
                  description: api.lsst.codes/ghslacker
                  username: "$${ghslacker_user}"
                  password: "$${ghslacker_pass}"
              - string:
                  id: slack-default-channel
                  scope: GLOBAL
                  description: Default slack channel
                  secret: dmj-jhoblitt-curly
              - string:
                  id: slack-channel-prefix
                  scope: GLOBAL
                  description: Prefix for generated slack channels
                  secret: dmjjc
              - string:
                  id: github-api-token-sqreadmin
                  scope: GLOBAL
                  description: github API personal access token (sqreadmincurly)
                  secret: "$${github_api_token}"
              - basicSSHUserPrivateKey:
                  id: github-jenkins-versiondb
                  scope: GLOBAL
                  description: github provingground-curly/versiondb deploy key
                  username: git
                  privateKeySource:
                    directEntry:
                      privateKey: "$${versiondb_ssh_private_key}"
              - usernamePassword:
                  id: dockerhub-sqreadmin
                  scope: GLOBAL
                  description: dockerhub (sqreadmincurly)
                  username: "$${dockerhub_user}"
                  password: "$${dockerhub_pass}"
  # Optionally specify additional init-containers
  customInitContainers: []
  # - name: custom-init
  #   image: "alpine:3.7"
  #   imagePullPolicy: Always
  #   command: [ "uname", "-a" ]

  sidecars:
    configAutoReload:
      # If enabled: true, Jenkins Configuration as Code will be reloaded on-the-fly without a reboot.  If false or not-specified,
      # jcasc changes will cause a reboot and will only be applied at the subsequent start-up.  Auto-reload uses the Jenkins CLI
      # over SSH to reapply config when changes to the configScripts are detected.  The admin user (or account you specify in
      # master.adminUser) will have a random SSH private key (RSA 4096) assigned unless you specify adminSshKey.  This will be saved to a k8s secret.
      enabled: true
      image: shadwell/k8s-sidecar:0.0.2
      imagePullPolicy: IfNotPresent
      resources:
        #   limits:
        #     cpu: 100m
        #     memory: 100Mi
        #   requests:
        #     cpu: 50m
        #     memory: 50Mi
      # SSH port value can be set to any unused TCP port.  The default, 1044, is a non-standard SSH port that has been chosen at random.
      # Is only used to reload jcasc config from the sidecar container running in the Jenkins master pod.
      # This TCP port will not be open in the pod (unless you specifically configure this), so Jenkins will not be
      # accessible via SSH from outside of the pod.  Note if you use non-root pod privileges (runAsUser & fsGroup),
      # this must be > 1024:
      sshTcpPort: 1044
      # folder in the pod that should hold the collected dashboards:
      folder: "/var/jenkins_home/casc_configs"
      # If specified, the sidecar will search for JCasC config-maps inside this namespace.
      # Otherwise the namespace in which the sidecar is running will be used.
      # It's also possible to specify ALL to search in all namespaces:
      # searchNamespace:

    # Allows you to inject additional/other sidecars
    other:
    ## The example below runs the client for https://smee.io as sidecar container next to Jenkins,
    ## that allows to trigger build behind a secure firewall.
    ## https://jenkins.io/blog/2019/01/07/webhook-firewalls/#triggering-builds-with-webhooks-behind-a-secure-firewall
    ##
    ## Note: To use it you should go to https://smee.io/new and update the url to the generete one.
    # - name: smee
    #   image: docker.io/twalter/smee-client:1.0.2
    #   args: ["--port", "{{ .Values.master.servicePort }}", "--path", "/github-webhook/", "--url", "https://smee.io/new"]
    #   resources:
    #     limits:
    #       cpu: 50m
    #       memory: 128Mi
    #     requests:
    #       cpu: 10m
    #       memory: 32Mi
  # Node labels and tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  nodeSelector: {}
  tolerations: []
  # Leverage a priorityClass to ensure your pods survive resource shortages
  # ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
  # priorityClass: system-cluster-critical
  podAnnotations: {}

  # The below two configuration-related values are deprecated and replaced by Jenkins Configuration as Code (see above
  # JCasC key).  They will be deleted in an upcoming version.
  customConfigMap: false
  # By default, the configMap is only used to set the initial config the first time
  # that the chart is installed.  Setting `overwriteConfig` to `true` will overwrite
  # the jenkins config with the contents of the configMap every time the pod starts.
  # This will also overwrite all init scripts
  overwriteConfig: true

  # By default, the Jobs Map is only used to set the initial jobs the first time
  # that the chart is installed.  Setting `overwriteJobs` to `true` will overwrite
  # the jenkins jobs configuration with the contents of Jobs every time the pod starts.
  overwriteJobs: false

  ingress:
    enabled: true
    # XXX note this seems to break with the regular pattern for ingress keys
    hostName: "${jenkins_fqdn}"
    tls:
      - secretName: "${jenkins_secret_name}"
        hosts:
          - "${jenkins_fqdn}"
  # master.hostAliases allows for adding entries to Pod /etc/hosts:
  # https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/
  hostAliases: []
  # - ip: 192.168.50.50
  #   hostnames:
  #     - something.local
  # - ip: 10.0.50.50
  #   hostnames:
  #     - other.local

  # Expose Prometheus metrics
  prometheus:
    # If enabled, add the prometheus plugin to the list of plugins to install
    # https://plugins.jenkins.io/prometheus
    enabled: true
    # Additional labels to add to the ServiceMonitor object
    serviceMonitorAdditionalLabels: {}
    scrapeInterval: 60s
    # This is the default endpoint used by the prometheus plugin
    scrapeEndpoint: /prometheus
    # Additional labels to add to the PrometheusRule object
    alertingRulesAdditionalLabels: {}
    # An array of prometheus alerting rules
    # See here: https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/
    # The `groups` root object is added by default, simply add the rule entries
    alertingrules: []

agent:
  enabled: false

persistence:
  enabled: true
  ## A manually managed Persistent Volume and Claim
  ## Requires persistence.enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  existingClaim: "master-pvc"
  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass:
  annotations: {}
  accessMode: "ReadWriteOnce"
  size: "500Gi"
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  mounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

backup:
  enabled: false

checkDeprecation: true
